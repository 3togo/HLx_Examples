// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "add_with_color.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic add_with_color::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic add_with_color::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> add_with_color::ap_ST_fsm_state1 = "1";
const sc_lv<2> add_with_color::ap_ST_fsm_pp0_stage0 = "10";
const bool add_with_color::ap_const_boolean_1 = true;
const sc_lv<32> add_with_color::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> add_with_color::ap_const_lv1_1 = "1";
const sc_lv<32> add_with_color::ap_const_lv32_1 = "1";
const bool add_with_color::ap_const_boolean_0 = false;
const sc_lv<16> add_with_color::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> add_with_color::ap_const_lv1_0 = "0";
const sc_lv<8> add_with_color::ap_const_lv8_0 = "00000000";
const sc_lv<8> add_with_color::ap_const_lv8_64 = "1100100";
const sc_lv<16> add_with_color::ap_const_lv16_1 = "1";
const sc_lv<16> add_with_color::ap_const_lv16_BD0F = "1011110100001111";
const sc_lv<31> add_with_color::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<8> add_with_color::ap_const_lv8_FF = "11111111";

add_with_color::add_with_color(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( img_in0_data_stream_0_V_empty_n );
    sensitive << ( img_in0_data_stream_1_V_empty_n );
    sensitive << ( img_in0_data_stream_2_V_empty_n );
    sensitive << ( img_in1_data_stream_0_V_empty_n );
    sensitive << ( img_in1_data_stream_1_V_empty_n );
    sensitive << ( img_in1_data_stream_2_V_empty_n );
    sensitive << ( img_out_data_stream_0_V_full_n );
    sensitive << ( img_out_data_stream_1_V_full_n );
    sensitive << ( img_out_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( img_in0_data_stream_0_V_empty_n );
    sensitive << ( img_in0_data_stream_1_V_empty_n );
    sensitive << ( img_in0_data_stream_2_V_empty_n );
    sensitive << ( img_in1_data_stream_0_V_empty_n );
    sensitive << ( img_in1_data_stream_1_V_empty_n );
    sensitive << ( img_in1_data_stream_2_V_empty_n );
    sensitive << ( img_out_data_stream_0_V_full_n );
    sensitive << ( img_out_data_stream_1_V_full_n );
    sensitive << ( img_out_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( img_in0_data_stream_0_V_empty_n );
    sensitive << ( img_in0_data_stream_1_V_empty_n );
    sensitive << ( img_in0_data_stream_2_V_empty_n );
    sensitive << ( img_in1_data_stream_0_V_empty_n );
    sensitive << ( img_in1_data_stream_1_V_empty_n );
    sensitive << ( img_in1_data_stream_2_V_empty_n );
    sensitive << ( img_out_data_stream_0_V_full_n );
    sensitive << ( img_out_data_stream_1_V_full_n );
    sensitive << ( img_out_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( img_in0_data_stream_0_V_empty_n );
    sensitive << ( img_in0_data_stream_1_V_empty_n );
    sensitive << ( img_in0_data_stream_2_V_empty_n );
    sensitive << ( img_in1_data_stream_0_V_empty_n );
    sensitive << ( img_in1_data_stream_1_V_empty_n );
    sensitive << ( img_in1_data_stream_2_V_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( img_out_data_stream_0_V_full_n );
    sensitive << ( img_out_data_stream_1_V_full_n );
    sensitive << ( img_out_data_stream_2_V_full_n );

    SC_METHOD(thread_ap_condition_172);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond_flatten_reg_416_pp0_iter1_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_indvar_flatten2_phi_fu_248_p6);
    sensitive << ( indvar_flatten2_reg_244 );
    sensitive << ( indvar_flatten_next_reg_411 );
    sensitive << ( exitcond_flatten_reg_416 );
    sensitive << ( ap_condition_172 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_exitcond_flatten_fu_300_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_indvar_flatten2_phi_fu_248_p6 );

    SC_METHOD(thread_img_in0_data_stream_0_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in0_data_stream_0_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_in0_data_stream_0_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_in0_data_stream_1_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in0_data_stream_1_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_in0_data_stream_1_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_in0_data_stream_2_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in0_data_stream_2_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_in0_data_stream_2_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_in1_data_stream_0_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in1_data_stream_0_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_in1_data_stream_0_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_in1_data_stream_1_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in1_data_stream_1_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_in1_data_stream_1_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_in1_data_stream_2_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in1_data_stream_2_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_in1_data_stream_2_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_out_data_stream_0_V_blk_n);
    sensitive << ( img_out_data_stream_0_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_out_data_stream_0_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_img_out_data_stream_0_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_out_data_stream_1_V_blk_n);
    sensitive << ( img_out_data_stream_1_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_out_data_stream_1_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_14_fu_352_p2 );

    SC_METHOD(thread_img_out_data_stream_1_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_out_data_stream_2_V_blk_n);
    sensitive << ( img_out_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_img_out_data_stream_2_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_15_fu_357_p2 );

    SC_METHOD(thread_img_out_data_stream_2_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_indvar_flatten_next_fu_294_p2);
    sensitive << ( ap_phi_mux_indvar_flatten2_phi_fu_248_p6 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( exitcond_flatten_fu_300_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_not_tmp_s_fu_346_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_13_fu_338_p3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp1_fu_306_p2);
    sensitive << ( tmp_s_reg_381 );
    sensitive << ( tmp_5_reg_391 );

    SC_METHOD(thread_tmp2_fu_329_p2);
    sensitive << ( tmp_9_reg_396 );
    sensitive << ( tmp_11_reg_406 );

    SC_METHOD(thread_tmp_10_fu_282_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in1_data_stream_1_V_dout );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_11_fu_288_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in1_data_stream_2_V_dout );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_12_fu_333_p2);
    sensitive << ( tmp_10_reg_401 );
    sensitive << ( tmp2_fu_329_p2 );

    SC_METHOD(thread_tmp_13_fu_338_p3);
    sensitive << ( tmp_12_fu_333_p2 );

    SC_METHOD(thread_tmp_14_fu_352_p2);
    sensitive << ( tmp_8_reg_420 );

    SC_METHOD(thread_tmp_15_fu_357_p2);
    sensitive << ( tmp_8_reg_420 );
    sensitive << ( not_tmp_s_reg_426 );

    SC_METHOD(thread_tmp_4_fu_264_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in0_data_stream_1_V_dout );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_5_fu_270_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in0_data_stream_2_V_dout );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_6_fu_310_p2);
    sensitive << ( tmp_4_reg_386 );
    sensitive << ( tmp1_fu_306_p2 );

    SC_METHOD(thread_tmp_7_fu_315_p3);
    sensitive << ( tmp_6_fu_310_p2 );

    SC_METHOD(thread_tmp_8_fu_323_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_7_fu_315_p3 );

    SC_METHOD(thread_tmp_9_fu_276_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in1_data_stream_0_V_dout );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_s_fu_258_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( img_in0_data_stream_0_V_dout );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "add_with_color_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, img_in0_data_stream_0_V_dout, "(port)img_in0_data_stream_0_V_dout");
    sc_trace(mVcdFile, img_in0_data_stream_0_V_empty_n, "(port)img_in0_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, img_in0_data_stream_0_V_read, "(port)img_in0_data_stream_0_V_read");
    sc_trace(mVcdFile, img_in0_data_stream_1_V_dout, "(port)img_in0_data_stream_1_V_dout");
    sc_trace(mVcdFile, img_in0_data_stream_1_V_empty_n, "(port)img_in0_data_stream_1_V_empty_n");
    sc_trace(mVcdFile, img_in0_data_stream_1_V_read, "(port)img_in0_data_stream_1_V_read");
    sc_trace(mVcdFile, img_in0_data_stream_2_V_dout, "(port)img_in0_data_stream_2_V_dout");
    sc_trace(mVcdFile, img_in0_data_stream_2_V_empty_n, "(port)img_in0_data_stream_2_V_empty_n");
    sc_trace(mVcdFile, img_in0_data_stream_2_V_read, "(port)img_in0_data_stream_2_V_read");
    sc_trace(mVcdFile, img_in1_data_stream_0_V_dout, "(port)img_in1_data_stream_0_V_dout");
    sc_trace(mVcdFile, img_in1_data_stream_0_V_empty_n, "(port)img_in1_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, img_in1_data_stream_0_V_read, "(port)img_in1_data_stream_0_V_read");
    sc_trace(mVcdFile, img_in1_data_stream_1_V_dout, "(port)img_in1_data_stream_1_V_dout");
    sc_trace(mVcdFile, img_in1_data_stream_1_V_empty_n, "(port)img_in1_data_stream_1_V_empty_n");
    sc_trace(mVcdFile, img_in1_data_stream_1_V_read, "(port)img_in1_data_stream_1_V_read");
    sc_trace(mVcdFile, img_in1_data_stream_2_V_dout, "(port)img_in1_data_stream_2_V_dout");
    sc_trace(mVcdFile, img_in1_data_stream_2_V_empty_n, "(port)img_in1_data_stream_2_V_empty_n");
    sc_trace(mVcdFile, img_in1_data_stream_2_V_read, "(port)img_in1_data_stream_2_V_read");
    sc_trace(mVcdFile, img_out_data_stream_0_V_din, "(port)img_out_data_stream_0_V_din");
    sc_trace(mVcdFile, img_out_data_stream_0_V_full_n, "(port)img_out_data_stream_0_V_full_n");
    sc_trace(mVcdFile, img_out_data_stream_0_V_write, "(port)img_out_data_stream_0_V_write");
    sc_trace(mVcdFile, img_out_data_stream_1_V_din, "(port)img_out_data_stream_1_V_din");
    sc_trace(mVcdFile, img_out_data_stream_1_V_full_n, "(port)img_out_data_stream_1_V_full_n");
    sc_trace(mVcdFile, img_out_data_stream_1_V_write, "(port)img_out_data_stream_1_V_write");
    sc_trace(mVcdFile, img_out_data_stream_2_V_din, "(port)img_out_data_stream_2_V_din");
    sc_trace(mVcdFile, img_out_data_stream_2_V_full_n, "(port)img_out_data_stream_2_V_full_n");
    sc_trace(mVcdFile, img_out_data_stream_2_V_write, "(port)img_out_data_stream_2_V_write");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, exitcond_flatten_fu_300_p2, "exitcond_flatten_fu_300_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, img_in0_data_stream_0_V_blk_n, "img_in0_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, img_in0_data_stream_1_V_blk_n, "img_in0_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, img_in0_data_stream_2_V_blk_n, "img_in0_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, img_in1_data_stream_0_V_blk_n, "img_in1_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, img_in1_data_stream_1_V_blk_n, "img_in1_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, img_in1_data_stream_2_V_blk_n, "img_in1_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, img_out_data_stream_0_V_blk_n, "img_out_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, img_out_data_stream_1_V_blk_n, "img_out_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, img_out_data_stream_2_V_blk_n, "img_out_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten2_reg_244, "indvar_flatten2_reg_244");
    sc_trace(mVcdFile, tmp_s_fu_258_p2, "tmp_s_fu_258_p2");
    sc_trace(mVcdFile, tmp_s_reg_381, "tmp_s_reg_381");
    sc_trace(mVcdFile, tmp_4_fu_264_p2, "tmp_4_fu_264_p2");
    sc_trace(mVcdFile, tmp_4_reg_386, "tmp_4_reg_386");
    sc_trace(mVcdFile, tmp_5_fu_270_p2, "tmp_5_fu_270_p2");
    sc_trace(mVcdFile, tmp_5_reg_391, "tmp_5_reg_391");
    sc_trace(mVcdFile, tmp_9_fu_276_p2, "tmp_9_fu_276_p2");
    sc_trace(mVcdFile, tmp_9_reg_396, "tmp_9_reg_396");
    sc_trace(mVcdFile, tmp_10_fu_282_p2, "tmp_10_fu_282_p2");
    sc_trace(mVcdFile, tmp_10_reg_401, "tmp_10_reg_401");
    sc_trace(mVcdFile, tmp_11_fu_288_p2, "tmp_11_fu_288_p2");
    sc_trace(mVcdFile, tmp_11_reg_406, "tmp_11_reg_406");
    sc_trace(mVcdFile, indvar_flatten_next_fu_294_p2, "indvar_flatten_next_fu_294_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_411, "indvar_flatten_next_reg_411");
    sc_trace(mVcdFile, exitcond_flatten_reg_416, "exitcond_flatten_reg_416");
    sc_trace(mVcdFile, exitcond_flatten_reg_416_pp0_iter1_reg, "exitcond_flatten_reg_416_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_8_fu_323_p2, "tmp_8_fu_323_p2");
    sc_trace(mVcdFile, tmp_8_reg_420, "tmp_8_reg_420");
    sc_trace(mVcdFile, not_tmp_s_fu_346_p2, "not_tmp_s_fu_346_p2");
    sc_trace(mVcdFile, not_tmp_s_reg_426, "not_tmp_s_reg_426");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_indvar_flatten2_phi_fu_248_p6, "ap_phi_mux_indvar_flatten2_phi_fu_248_p6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp1_fu_306_p2, "tmp1_fu_306_p2");
    sc_trace(mVcdFile, tmp_6_fu_310_p2, "tmp_6_fu_310_p2");
    sc_trace(mVcdFile, tmp_7_fu_315_p3, "tmp_7_fu_315_p3");
    sc_trace(mVcdFile, tmp2_fu_329_p2, "tmp2_fu_329_p2");
    sc_trace(mVcdFile, tmp_12_fu_333_p2, "tmp_12_fu_333_p2");
    sc_trace(mVcdFile, tmp_13_fu_338_p3, "tmp_13_fu_338_p3");
    sc_trace(mVcdFile, tmp_14_fu_352_p2, "tmp_14_fu_352_p2");
    sc_trace(mVcdFile, tmp_15_fu_357_p2, "tmp_15_fu_357_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_172, "ap_condition_172");
#endif

    }
}

add_with_color::~add_with_color() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void add_with_color::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_reg_416_pp0_iter1_reg.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = real_start.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_416.read(), ap_const_lv1_0))) {
        indvar_flatten2_reg_244 = indvar_flatten_next_reg_411.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_reg_416.read())))) {
        indvar_flatten2_reg_244 = ap_const_lv16_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_416 = exitcond_flatten_fu_300_p2.read();
        exitcond_flatten_reg_416_pp0_iter1_reg = exitcond_flatten_reg_416.read();
        not_tmp_s_reg_426 = not_tmp_s_fu_346_p2.read();
        tmp_10_reg_401 = tmp_10_fu_282_p2.read();
        tmp_11_reg_406 = tmp_11_fu_288_p2.read();
        tmp_4_reg_386 = tmp_4_fu_264_p2.read();
        tmp_5_reg_391 = tmp_5_fu_270_p2.read();
        tmp_8_reg_420 = tmp_8_fu_323_p2.read();
        tmp_9_reg_396 = tmp_9_fu_276_p2.read();
        tmp_s_reg_381 = tmp_s_fu_258_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_next_reg_411 = indvar_flatten_next_fu_294_p2.read();
    }
}

void add_with_color::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void add_with_color::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void add_with_color::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void add_with_color::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_1_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_2_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_1_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_2_V_empty_n.read()))) || ((esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_0_V_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_1_V_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_2_V_full_n.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void add_with_color::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_1_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_2_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_1_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_2_V_empty_n.read()))) || ((esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_0_V_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_1_V_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_2_V_full_n.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void add_with_color::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_1_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_2_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_0_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_1_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_2_V_empty_n.read()))) || ((esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_0_V_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_1_V_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_2_V_full_n.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void add_with_color::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void add_with_color::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_in0_data_stream_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_in1_data_stream_2_V_empty_n.read()));
}

void add_with_color::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void add_with_color::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_out_data_stream_2_V_full_n.read()));
}

void add_with_color::thread_ap_condition_172() {
    ap_condition_172 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void add_with_color::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_reg_416_pp0_iter1_reg.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void add_with_color::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void add_with_color::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = real_start.read();
}

void add_with_color::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void add_with_color::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void add_with_color::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void add_with_color::thread_ap_phi_mux_indvar_flatten2_phi_fu_248_p6() {
    if (esl_seteq<1,1,1>(ap_condition_172.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_reg_416.read())) {
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = ap_const_lv16_0;
        } else if (esl_seteq<1,1,1>(exitcond_flatten_reg_416.read(), ap_const_lv1_0)) {
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = indvar_flatten_next_reg_411.read();
        } else {
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = indvar_flatten2_reg_244.read();
        }
    } else {
        ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = indvar_flatten2_reg_244.read();
    }
}

void add_with_color::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void add_with_color::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void add_with_color::thread_exitcond_flatten_fu_300_p2() {
    exitcond_flatten_fu_300_p2 = (!ap_phi_mux_indvar_flatten2_phi_fu_248_p6.read().is_01() || !ap_const_lv16_BD0F.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_flatten2_phi_fu_248_p6.read() == ap_const_lv16_BD0F);
}

void add_with_color::thread_img_in0_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_in0_data_stream_0_V_blk_n = img_in0_data_stream_0_V_empty_n.read();
    } else {
        img_in0_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_in0_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_in0_data_stream_0_V_read = ap_const_logic_1;
    } else {
        img_in0_data_stream_0_V_read = ap_const_logic_0;
    }
}

void add_with_color::thread_img_in0_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_in0_data_stream_1_V_blk_n = img_in0_data_stream_1_V_empty_n.read();
    } else {
        img_in0_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_in0_data_stream_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_in0_data_stream_1_V_read = ap_const_logic_1;
    } else {
        img_in0_data_stream_1_V_read = ap_const_logic_0;
    }
}

void add_with_color::thread_img_in0_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_in0_data_stream_2_V_blk_n = img_in0_data_stream_2_V_empty_n.read();
    } else {
        img_in0_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_in0_data_stream_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_in0_data_stream_2_V_read = ap_const_logic_1;
    } else {
        img_in0_data_stream_2_V_read = ap_const_logic_0;
    }
}

void add_with_color::thread_img_in1_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_in1_data_stream_0_V_blk_n = img_in1_data_stream_0_V_empty_n.read();
    } else {
        img_in1_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_in1_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_in1_data_stream_0_V_read = ap_const_logic_1;
    } else {
        img_in1_data_stream_0_V_read = ap_const_logic_0;
    }
}

void add_with_color::thread_img_in1_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_in1_data_stream_1_V_blk_n = img_in1_data_stream_1_V_empty_n.read();
    } else {
        img_in1_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_in1_data_stream_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_in1_data_stream_1_V_read = ap_const_logic_1;
    } else {
        img_in1_data_stream_1_V_read = ap_const_logic_0;
    }
}

void add_with_color::thread_img_in1_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_in1_data_stream_2_V_blk_n = img_in1_data_stream_2_V_empty_n.read();
    } else {
        img_in1_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_in1_data_stream_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_in1_data_stream_2_V_read = ap_const_logic_1;
    } else {
        img_in1_data_stream_2_V_read = ap_const_logic_0;
    }
}

void add_with_color::thread_img_out_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_out_data_stream_0_V_blk_n = img_out_data_stream_0_V_full_n.read();
    } else {
        img_out_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_out_data_stream_0_V_din() {
    img_out_data_stream_0_V_din = ap_const_lv8_0;
}

void add_with_color::thread_img_out_data_stream_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_out_data_stream_0_V_write = ap_const_logic_1;
    } else {
        img_out_data_stream_0_V_write = ap_const_logic_0;
    }
}

void add_with_color::thread_img_out_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_out_data_stream_1_V_blk_n = img_out_data_stream_1_V_full_n.read();
    } else {
        img_out_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_out_data_stream_1_V_din() {
    img_out_data_stream_1_V_din = (!tmp_14_fu_352_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_14_fu_352_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void add_with_color::thread_img_out_data_stream_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_out_data_stream_1_V_write = ap_const_logic_1;
    } else {
        img_out_data_stream_1_V_write = ap_const_logic_0;
    }
}

void add_with_color::thread_img_out_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_out_data_stream_2_V_blk_n = img_out_data_stream_2_V_full_n.read();
    } else {
        img_out_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void add_with_color::thread_img_out_data_stream_2_V_din() {
    img_out_data_stream_2_V_din = (!tmp_15_fu_357_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_15_fu_357_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void add_with_color::thread_img_out_data_stream_2_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_out_data_stream_2_V_write = ap_const_logic_1;
    } else {
        img_out_data_stream_2_V_write = ap_const_logic_0;
    }
}

void add_with_color::thread_indvar_flatten_next_fu_294_p2() {
    indvar_flatten_next_fu_294_p2 = (!ap_const_lv16_1.is_01() || !ap_phi_mux_indvar_flatten2_phi_fu_248_p6.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(ap_phi_mux_indvar_flatten2_phi_fu_248_p6.read()));
}

void add_with_color::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_fu_300_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void add_with_color::thread_not_tmp_s_fu_346_p2() {
    not_tmp_s_fu_346_p2 = (!tmp_13_fu_338_p3.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_13_fu_338_p3.read() != ap_const_lv32_0);
}

void add_with_color::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void add_with_color::thread_start_out() {
    start_out = real_start.read();
}

void add_with_color::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void add_with_color::thread_tmp1_fu_306_p2() {
    tmp1_fu_306_p2 = (tmp_s_reg_381.read() | tmp_5_reg_391.read());
}

void add_with_color::thread_tmp2_fu_329_p2() {
    tmp2_fu_329_p2 = (tmp_9_reg_396.read() | tmp_11_reg_406.read());
}

void add_with_color::thread_tmp_10_fu_282_p2() {
    tmp_10_fu_282_p2 = (!img_in1_data_stream_1_V_dout.read().is_01() || !ap_const_lv8_64.is_01())? sc_lv<1>(): (sc_biguint<8>(img_in1_data_stream_1_V_dout.read()) > sc_biguint<8>(ap_const_lv8_64));
}

void add_with_color::thread_tmp_11_fu_288_p2() {
    tmp_11_fu_288_p2 = (!img_in1_data_stream_2_V_dout.read().is_01() || !ap_const_lv8_64.is_01())? sc_lv<1>(): (sc_biguint<8>(img_in1_data_stream_2_V_dout.read()) > sc_biguint<8>(ap_const_lv8_64));
}

void add_with_color::thread_tmp_12_fu_333_p2() {
    tmp_12_fu_333_p2 = (tmp2_fu_329_p2.read() | tmp_10_reg_401.read());
}

void add_with_color::thread_tmp_13_fu_338_p3() {
    tmp_13_fu_338_p3 = esl_concat<31,1>(ap_const_lv31_0, tmp_12_fu_333_p2.read());
}

void add_with_color::thread_tmp_14_fu_352_p2() {
    tmp_14_fu_352_p2 = (tmp_8_reg_420.read() ^ ap_const_lv1_1);
}

void add_with_color::thread_tmp_15_fu_357_p2() {
    tmp_15_fu_357_p2 = (tmp_8_reg_420.read() & not_tmp_s_reg_426.read());
}

void add_with_color::thread_tmp_4_fu_264_p2() {
    tmp_4_fu_264_p2 = (!img_in0_data_stream_1_V_dout.read().is_01() || !ap_const_lv8_64.is_01())? sc_lv<1>(): (sc_biguint<8>(img_in0_data_stream_1_V_dout.read()) > sc_biguint<8>(ap_const_lv8_64));
}

void add_with_color::thread_tmp_5_fu_270_p2() {
    tmp_5_fu_270_p2 = (!img_in0_data_stream_2_V_dout.read().is_01() || !ap_const_lv8_64.is_01())? sc_lv<1>(): (sc_biguint<8>(img_in0_data_stream_2_V_dout.read()) > sc_biguint<8>(ap_const_lv8_64));
}

void add_with_color::thread_tmp_6_fu_310_p2() {
    tmp_6_fu_310_p2 = (tmp1_fu_306_p2.read() | tmp_4_reg_386.read());
}

void add_with_color::thread_tmp_7_fu_315_p3() {
    tmp_7_fu_315_p3 = esl_concat<31,1>(ap_const_lv31_0, tmp_6_fu_310_p2.read());
}

void add_with_color::thread_tmp_8_fu_323_p2() {
    tmp_8_fu_323_p2 = (!tmp_7_fu_315_p3.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_315_p3.read() == ap_const_lv32_0);
}

void add_with_color::thread_tmp_9_fu_276_p2() {
    tmp_9_fu_276_p2 = (!img_in1_data_stream_0_V_dout.read().is_01() || !ap_const_lv8_64.is_01())? sc_lv<1>(): (sc_biguint<8>(img_in1_data_stream_0_V_dout.read()) > sc_biguint<8>(ap_const_lv8_64));
}

void add_with_color::thread_tmp_s_fu_258_p2() {
    tmp_s_fu_258_p2 = (!img_in0_data_stream_0_V_dout.read().is_01() || !ap_const_lv8_64.is_01())? sc_lv<1>(): (sc_biguint<8>(img_in0_data_stream_0_V_dout.read()) > sc_biguint<8>(ap_const_lv8_64));
}

void add_with_color::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

