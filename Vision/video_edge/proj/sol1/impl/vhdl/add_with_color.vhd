-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_with_color is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in0_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_in0_data_stream_0_V_read : OUT STD_LOGIC;
    img_in0_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in0_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_in0_data_stream_1_V_read : OUT STD_LOGIC;
    img_in0_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in0_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_in0_data_stream_2_V_read : OUT STD_LOGIC;
    img_in1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in1_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_in1_data_stream_0_V_read : OUT STD_LOGIC;
    img_in1_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in1_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_in1_data_stream_1_V_read : OUT STD_LOGIC;
    img_in1_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_in1_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_in1_data_stream_2_V_read : OUT STD_LOGIC;
    img_out_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_0_V_full_n : IN STD_LOGIC;
    img_out_data_stream_0_V_write : OUT STD_LOGIC;
    img_out_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_1_V_full_n : IN STD_LOGIC;
    img_out_data_stream_1_V_write : OUT STD_LOGIC;
    img_out_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_out_data_stream_2_V_full_n : IN STD_LOGIC;
    img_out_data_stream_2_V_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of add_with_color is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_BD0F : STD_LOGIC_VECTOR (15 downto 0) := "1011110100001111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal exitcond_flatten_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal img_in0_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal img_in0_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_in0_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_in1_data_stream_0_V_blk_n : STD_LOGIC;
    signal img_in1_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_in1_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_out_data_stream_0_V_blk_n : STD_LOGIC;
    signal img_out_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_out_data_stream_2_V_blk_n : STD_LOGIC;
    signal indvar_flatten2_reg_244 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_294_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next_reg_411 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_flatten_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_416_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten2_phi_fu_248_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_172 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_flatten_reg_416_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten2_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_flatten_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten2_reg_244 <= indvar_flatten_next_reg_411;
            elsif ((((exitcond_flatten_reg_416 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten2_reg_244 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_416 <= exitcond_flatten_fu_300_p2;
                exitcond_flatten_reg_416_pp0_iter1_reg <= exitcond_flatten_reg_416;
                not_tmp_s_reg_426 <= not_tmp_s_fu_346_p2;
                tmp_10_reg_401 <= tmp_10_fu_282_p2;
                tmp_11_reg_406 <= tmp_11_fu_288_p2;
                tmp_4_reg_386 <= tmp_4_fu_264_p2;
                tmp_5_reg_391 <= tmp_5_fu_270_p2;
                tmp_8_reg_420 <= tmp_8_fu_323_p2;
                tmp_9_reg_396 <= tmp_9_fu_276_p2;
                tmp_s_reg_381 <= tmp_s_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_411 <= indvar_flatten_next_fu_294_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, img_in0_data_stream_0_V_empty_n, img_in0_data_stream_1_V_empty_n, img_in0_data_stream_2_V_empty_n, img_in1_data_stream_0_V_empty_n, img_in1_data_stream_1_V_empty_n, img_in1_data_stream_2_V_empty_n, img_out_data_stream_0_V_full_n, img_out_data_stream_1_V_full_n, img_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((img_out_data_stream_2_V_full_n = ap_const_logic_0) or (img_out_data_stream_1_V_full_n = ap_const_logic_0) or (img_out_data_stream_0_V_full_n = ap_const_logic_0))) or ((real_start = ap_const_logic_1) and ((img_in1_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_0_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, img_in0_data_stream_0_V_empty_n, img_in0_data_stream_1_V_empty_n, img_in0_data_stream_2_V_empty_n, img_in1_data_stream_0_V_empty_n, img_in1_data_stream_1_V_empty_n, img_in1_data_stream_2_V_empty_n, img_out_data_stream_0_V_full_n, img_out_data_stream_1_V_full_n, img_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((img_out_data_stream_2_V_full_n = ap_const_logic_0) or (img_out_data_stream_1_V_full_n = ap_const_logic_0) or (img_out_data_stream_0_V_full_n = ap_const_logic_0))) or ((real_start = ap_const_logic_1) and ((img_in1_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_0_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, img_in0_data_stream_0_V_empty_n, img_in0_data_stream_1_V_empty_n, img_in0_data_stream_2_V_empty_n, img_in1_data_stream_0_V_empty_n, img_in1_data_stream_1_V_empty_n, img_in1_data_stream_2_V_empty_n, img_out_data_stream_0_V_full_n, img_out_data_stream_1_V_full_n, img_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((img_out_data_stream_2_V_full_n = ap_const_logic_0) or (img_out_data_stream_1_V_full_n = ap_const_logic_0) or (img_out_data_stream_0_V_full_n = ap_const_logic_0))) or ((real_start = ap_const_logic_1) and ((img_in1_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_0_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(img_in0_data_stream_0_V_empty_n, img_in0_data_stream_1_V_empty_n, img_in0_data_stream_2_V_empty_n, img_in1_data_stream_0_V_empty_n, img_in1_data_stream_1_V_empty_n, img_in1_data_stream_2_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((img_in1_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in1_data_stream_0_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_2_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_1_V_empty_n = ap_const_logic_0) or (img_in0_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter2_assign_proc : process(img_out_data_stream_0_V_full_n, img_out_data_stream_1_V_full_n, img_out_data_stream_2_V_full_n)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((img_out_data_stream_2_V_full_n = ap_const_logic_0) or (img_out_data_stream_1_V_full_n = ap_const_logic_0) or (img_out_data_stream_0_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_172_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_172 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, exitcond_flatten_reg_416_pp0_iter1_reg)
    begin
        if (((exitcond_flatten_reg_416_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten2_phi_fu_248_p6_assign_proc : process(indvar_flatten2_reg_244, indvar_flatten_next_reg_411, exitcond_flatten_reg_416, ap_condition_172)
    begin
        if ((ap_const_boolean_1 = ap_condition_172)) then
            if ((exitcond_flatten_reg_416 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_248_p6 <= ap_const_lv16_0;
            elsif ((exitcond_flatten_reg_416 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_248_p6 <= indvar_flatten_next_reg_411;
            else 
                ap_phi_mux_indvar_flatten2_phi_fu_248_p6 <= indvar_flatten2_reg_244;
            end if;
        else 
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 <= indvar_flatten2_reg_244;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_300_p2 <= "1" when (ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = ap_const_lv16_BD0F) else "0";

    img_in0_data_stream_0_V_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, img_in0_data_stream_0_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_in0_data_stream_0_V_blk_n <= img_in0_data_stream_0_V_empty_n;
        else 
            img_in0_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in0_data_stream_0_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in0_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_in0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in0_data_stream_1_V_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, img_in0_data_stream_1_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_in0_data_stream_1_V_blk_n <= img_in0_data_stream_1_V_empty_n;
        else 
            img_in0_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in0_data_stream_1_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in0_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_in0_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in0_data_stream_2_V_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, img_in0_data_stream_2_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_in0_data_stream_2_V_blk_n <= img_in0_data_stream_2_V_empty_n;
        else 
            img_in0_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in0_data_stream_2_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in0_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_in0_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in1_data_stream_0_V_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, img_in1_data_stream_0_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_in1_data_stream_0_V_blk_n <= img_in1_data_stream_0_V_empty_n;
        else 
            img_in1_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in1_data_stream_0_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in1_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_in1_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in1_data_stream_1_V_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, img_in1_data_stream_1_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_in1_data_stream_1_V_blk_n <= img_in1_data_stream_1_V_empty_n;
        else 
            img_in1_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in1_data_stream_1_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in1_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_in1_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_in1_data_stream_2_V_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, img_in1_data_stream_2_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_in1_data_stream_2_V_blk_n <= img_in1_data_stream_2_V_empty_n;
        else 
            img_in1_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_in1_data_stream_2_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in1_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_in1_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_0_V_blk_n_assign_proc : process(img_out_data_stream_0_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_out_data_stream_0_V_blk_n <= img_out_data_stream_0_V_full_n;
        else 
            img_out_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_0_V_din <= ap_const_lv8_0;

    img_out_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_out_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_1_V_blk_n_assign_proc : process(img_out_data_stream_1_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_out_data_stream_1_V_blk_n <= img_out_data_stream_1_V_full_n;
        else 
            img_out_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_1_V_din <= 
        ap_const_lv8_FF when (tmp_14_fu_352_p2(0) = '1') else 
        ap_const_lv8_0;

    img_out_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_out_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_out_data_stream_2_V_blk_n_assign_proc : process(img_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_out_data_stream_2_V_blk_n <= img_out_data_stream_2_V_full_n;
        else 
            img_out_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_data_stream_2_V_din <= 
        ap_const_lv8_FF when (tmp_15_fu_357_p2(0) = '1') else 
        ap_const_lv8_0;

    img_out_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_out_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_out_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_294_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ap_phi_mux_indvar_flatten2_phi_fu_248_p6));

    internal_ap_ready_assign_proc : process(real_start, exitcond_flatten_fu_300_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_fu_300_p2 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_s_fu_346_p2 <= "0" when (tmp_13_fu_338_p3 = ap_const_lv32_0) else "1";

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_306_p2 <= (tmp_s_reg_381 or tmp_5_reg_391);
    tmp2_fu_329_p2 <= (tmp_9_reg_396 or tmp_11_reg_406);
    tmp_10_fu_282_p2 <= "1" when (unsigned(img_in1_data_stream_1_V_dout) > unsigned(ap_const_lv8_64)) else "0";
    tmp_11_fu_288_p2 <= "1" when (unsigned(img_in1_data_stream_2_V_dout) > unsigned(ap_const_lv8_64)) else "0";
    tmp_12_fu_333_p2 <= (tmp_10_reg_401 or tmp2_fu_329_p2);
    tmp_13_fu_338_p3 <= (ap_const_lv31_0 & tmp_12_fu_333_p2);
    tmp_14_fu_352_p2 <= (tmp_8_reg_420 xor ap_const_lv1_1);
    tmp_15_fu_357_p2 <= (tmp_8_reg_420 and not_tmp_s_reg_426);
    tmp_4_fu_264_p2 <= "1" when (unsigned(img_in0_data_stream_1_V_dout) > unsigned(ap_const_lv8_64)) else "0";
    tmp_5_fu_270_p2 <= "1" when (unsigned(img_in0_data_stream_2_V_dout) > unsigned(ap_const_lv8_64)) else "0";
    tmp_6_fu_310_p2 <= (tmp_4_reg_386 or tmp1_fu_306_p2);
    tmp_7_fu_315_p3 <= (ap_const_lv31_0 & tmp_6_fu_310_p2);
    tmp_8_fu_323_p2 <= "1" when (tmp_7_fu_315_p3 = ap_const_lv32_0) else "0";
    tmp_9_fu_276_p2 <= "1" when (unsigned(img_in1_data_stream_0_V_dout) > unsigned(ap_const_lv8_64)) else "0";
    tmp_s_fu_258_p2 <= "1" when (unsigned(img_in0_data_stream_0_V_dout) > unsigned(ap_const_lv8_64)) else "0";
end behav;
