// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module add_with_color (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_in0_data_stream_0_V_dout,
        img_in0_data_stream_0_V_empty_n,
        img_in0_data_stream_0_V_read,
        img_in0_data_stream_1_V_dout,
        img_in0_data_stream_1_V_empty_n,
        img_in0_data_stream_1_V_read,
        img_in0_data_stream_2_V_dout,
        img_in0_data_stream_2_V_empty_n,
        img_in0_data_stream_2_V_read,
        img_in1_data_stream_0_V_dout,
        img_in1_data_stream_0_V_empty_n,
        img_in1_data_stream_0_V_read,
        img_in1_data_stream_1_V_dout,
        img_in1_data_stream_1_V_empty_n,
        img_in1_data_stream_1_V_read,
        img_in1_data_stream_2_V_dout,
        img_in1_data_stream_2_V_empty_n,
        img_in1_data_stream_2_V_read,
        img_out_data_stream_0_V_din,
        img_out_data_stream_0_V_full_n,
        img_out_data_stream_0_V_write,
        img_out_data_stream_1_V_din,
        img_out_data_stream_1_V_full_n,
        img_out_data_stream_1_V_write,
        img_out_data_stream_2_V_din,
        img_out_data_stream_2_V_full_n,
        img_out_data_stream_2_V_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_in0_data_stream_0_V_dout;
input   img_in0_data_stream_0_V_empty_n;
output   img_in0_data_stream_0_V_read;
input  [7:0] img_in0_data_stream_1_V_dout;
input   img_in0_data_stream_1_V_empty_n;
output   img_in0_data_stream_1_V_read;
input  [7:0] img_in0_data_stream_2_V_dout;
input   img_in0_data_stream_2_V_empty_n;
output   img_in0_data_stream_2_V_read;
input  [7:0] img_in1_data_stream_0_V_dout;
input   img_in1_data_stream_0_V_empty_n;
output   img_in1_data_stream_0_V_read;
input  [7:0] img_in1_data_stream_1_V_dout;
input   img_in1_data_stream_1_V_empty_n;
output   img_in1_data_stream_1_V_read;
input  [7:0] img_in1_data_stream_2_V_dout;
input   img_in1_data_stream_2_V_empty_n;
output   img_in1_data_stream_2_V_read;
output  [7:0] img_out_data_stream_0_V_din;
input   img_out_data_stream_0_V_full_n;
output   img_out_data_stream_0_V_write;
output  [7:0] img_out_data_stream_1_V_din;
input   img_out_data_stream_1_V_full_n;
output   img_out_data_stream_1_V_write;
output  [7:0] img_out_data_stream_2_V_din;
input   img_out_data_stream_2_V_full_n;
output   img_out_data_stream_2_V_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg img_in0_data_stream_0_V_read;
reg img_in0_data_stream_1_V_read;
reg img_in0_data_stream_2_V_read;
reg img_in1_data_stream_0_V_read;
reg img_in1_data_stream_1_V_read;
reg img_in1_data_stream_2_V_read;
reg img_out_data_stream_0_V_write;
reg img_out_data_stream_1_V_write;
reg img_out_data_stream_2_V_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] exitcond_flatten_fu_300_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    img_in0_data_stream_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    img_in0_data_stream_1_V_blk_n;
reg    img_in0_data_stream_2_V_blk_n;
reg    img_in1_data_stream_0_V_blk_n;
reg    img_in1_data_stream_1_V_blk_n;
reg    img_in1_data_stream_2_V_blk_n;
reg    img_out_data_stream_0_V_blk_n;
reg    img_out_data_stream_1_V_blk_n;
reg    img_out_data_stream_2_V_blk_n;
reg   [15:0] indvar_flatten2_reg_244;
wire   [0:0] tmp_s_fu_258_p2;
reg   [0:0] tmp_s_reg_381;
wire   [0:0] tmp_4_fu_264_p2;
reg   [0:0] tmp_4_reg_386;
wire   [0:0] tmp_5_fu_270_p2;
reg   [0:0] tmp_5_reg_391;
wire   [0:0] tmp_9_fu_276_p2;
reg   [0:0] tmp_9_reg_396;
wire   [0:0] tmp_10_fu_282_p2;
reg   [0:0] tmp_10_reg_401;
wire   [0:0] tmp_11_fu_288_p2;
reg   [0:0] tmp_11_reg_406;
wire   [15:0] indvar_flatten_next_fu_294_p2;
reg   [15:0] indvar_flatten_next_reg_411;
reg   [0:0] exitcond_flatten_reg_416;
reg   [0:0] exitcond_flatten_reg_416_pp0_iter1_reg;
wire   [0:0] tmp_8_fu_323_p2;
reg   [0:0] tmp_8_reg_420;
wire   [0:0] not_tmp_s_fu_346_p2;
reg   [0:0] not_tmp_s_reg_426;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_phi_mux_indvar_flatten2_phi_fu_248_p6;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp1_fu_306_p2;
wire   [0:0] tmp_6_fu_310_p2;
wire   [31:0] tmp_7_fu_315_p3;
wire   [0:0] tmp2_fu_329_p2;
wire   [0:0] tmp_12_fu_333_p2;
wire   [31:0] tmp_13_fu_338_p3;
wire   [0:0] tmp_14_fu_352_p2;
wire   [0:0] tmp_15_fu_357_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_172;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_flatten_reg_416_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_416 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten2_reg_244 <= indvar_flatten_next_reg_411;
    end else if ((((exitcond_flatten_reg_416 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_244 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_416 <= exitcond_flatten_fu_300_p2;
        exitcond_flatten_reg_416_pp0_iter1_reg <= exitcond_flatten_reg_416;
        not_tmp_s_reg_426 <= not_tmp_s_fu_346_p2;
        tmp_10_reg_401 <= tmp_10_fu_282_p2;
        tmp_11_reg_406 <= tmp_11_fu_288_p2;
        tmp_4_reg_386 <= tmp_4_fu_264_p2;
        tmp_5_reg_391 <= tmp_5_fu_270_p2;
        tmp_8_reg_420 <= tmp_8_fu_323_p2;
        tmp_9_reg_396 <= tmp_9_fu_276_p2;
        tmp_s_reg_381 <= tmp_s_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_411 <= indvar_flatten_next_fu_294_p2;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_416_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_172)) begin
        if ((exitcond_flatten_reg_416 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = 16'd0;
        end else if ((exitcond_flatten_reg_416 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = indvar_flatten_next_reg_411;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = indvar_flatten2_reg_244;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_248_p6 = indvar_flatten2_reg_244;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        img_in0_data_stream_0_V_blk_n = img_in0_data_stream_0_V_empty_n;
    end else begin
        img_in0_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in0_data_stream_0_V_read = 1'b1;
    end else begin
        img_in0_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        img_in0_data_stream_1_V_blk_n = img_in0_data_stream_1_V_empty_n;
    end else begin
        img_in0_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in0_data_stream_1_V_read = 1'b1;
    end else begin
        img_in0_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        img_in0_data_stream_2_V_blk_n = img_in0_data_stream_2_V_empty_n;
    end else begin
        img_in0_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in0_data_stream_2_V_read = 1'b1;
    end else begin
        img_in0_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        img_in1_data_stream_0_V_blk_n = img_in1_data_stream_0_V_empty_n;
    end else begin
        img_in1_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in1_data_stream_0_V_read = 1'b1;
    end else begin
        img_in1_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        img_in1_data_stream_1_V_blk_n = img_in1_data_stream_1_V_empty_n;
    end else begin
        img_in1_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in1_data_stream_1_V_read = 1'b1;
    end else begin
        img_in1_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        img_in1_data_stream_2_V_blk_n = img_in1_data_stream_2_V_empty_n;
    end else begin
        img_in1_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in1_data_stream_2_V_read = 1'b1;
    end else begin
        img_in1_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_out_data_stream_0_V_blk_n = img_out_data_stream_0_V_full_n;
    end else begin
        img_out_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_0_V_write = 1'b1;
    end else begin
        img_out_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_out_data_stream_1_V_blk_n = img_out_data_stream_1_V_full_n;
    end else begin
        img_out_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_1_V_write = 1'b1;
    end else begin
        img_out_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_out_data_stream_2_V_blk_n = img_out_data_stream_2_V_full_n;
    end else begin
        img_out_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_2_V_write = 1'b1;
    end else begin
        img_out_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_fu_300_p2 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((img_out_data_stream_2_V_full_n == 1'b0) | (img_out_data_stream_1_V_full_n == 1'b0) | (img_out_data_stream_0_V_full_n == 1'b0))) | ((real_start == 1'b1) & ((img_in1_data_stream_2_V_empty_n == 1'b0) | (img_in1_data_stream_1_V_empty_n == 1'b0) | (img_in1_data_stream_0_V_empty_n == 1'b0) | (img_in0_data_stream_2_V_empty_n == 1'b0) | (img_in0_data_stream_1_V_empty_n == 1'b0) | (img_in0_data_stream_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((img_out_data_stream_2_V_full_n == 1'b0) | (img_out_data_stream_1_V_full_n == 1'b0) | (img_out_data_stream_0_V_full_n == 1'b0))) | ((real_start == 1'b1) & ((img_in1_data_stream_2_V_empty_n == 1'b0) | (img_in1_data_stream_1_V_empty_n == 1'b0) | (img_in1_data_stream_0_V_empty_n == 1'b0) | (img_in0_data_stream_2_V_empty_n == 1'b0) | (img_in0_data_stream_1_V_empty_n == 1'b0) | (img_in0_data_stream_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((img_out_data_stream_2_V_full_n == 1'b0) | (img_out_data_stream_1_V_full_n == 1'b0) | (img_out_data_stream_0_V_full_n == 1'b0))) | ((real_start == 1'b1) & ((img_in1_data_stream_2_V_empty_n == 1'b0) | (img_in1_data_stream_1_V_empty_n == 1'b0) | (img_in1_data_stream_0_V_empty_n == 1'b0) | (img_in0_data_stream_2_V_empty_n == 1'b0) | (img_in0_data_stream_1_V_empty_n == 1'b0) | (img_in0_data_stream_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((img_in1_data_stream_2_V_empty_n == 1'b0) | (img_in1_data_stream_1_V_empty_n == 1'b0) | (img_in1_data_stream_0_V_empty_n == 1'b0) | (img_in0_data_stream_2_V_empty_n == 1'b0) | (img_in0_data_stream_1_V_empty_n == 1'b0) | (img_in0_data_stream_0_V_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((img_out_data_stream_2_V_full_n == 1'b0) | (img_out_data_stream_1_V_full_n == 1'b0) | (img_out_data_stream_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_172 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_300_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_248_p6 == 16'd48399) ? 1'b1 : 1'b0);

assign img_out_data_stream_0_V_din = 8'd0;

assign img_out_data_stream_1_V_din = ((tmp_14_fu_352_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign img_out_data_stream_2_V_din = ((tmp_15_fu_357_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign indvar_flatten_next_fu_294_p2 = (16'd1 + ap_phi_mux_indvar_flatten2_phi_fu_248_p6);

assign not_tmp_s_fu_346_p2 = ((tmp_13_fu_338_p3 != 32'd0) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign tmp1_fu_306_p2 = (tmp_s_reg_381 | tmp_5_reg_391);

assign tmp2_fu_329_p2 = (tmp_9_reg_396 | tmp_11_reg_406);

assign tmp_10_fu_282_p2 = ((img_in1_data_stream_1_V_dout > 8'd100) ? 1'b1 : 1'b0);

assign tmp_11_fu_288_p2 = ((img_in1_data_stream_2_V_dout > 8'd100) ? 1'b1 : 1'b0);

assign tmp_12_fu_333_p2 = (tmp_10_reg_401 | tmp2_fu_329_p2);

assign tmp_13_fu_338_p3 = {{31'd0}, {tmp_12_fu_333_p2}};

assign tmp_14_fu_352_p2 = (tmp_8_reg_420 ^ 1'd1);

assign tmp_15_fu_357_p2 = (tmp_8_reg_420 & not_tmp_s_reg_426);

assign tmp_4_fu_264_p2 = ((img_in0_data_stream_1_V_dout > 8'd100) ? 1'b1 : 1'b0);

assign tmp_5_fu_270_p2 = ((img_in0_data_stream_2_V_dout > 8'd100) ? 1'b1 : 1'b0);

assign tmp_6_fu_310_p2 = (tmp_4_reg_386 | tmp1_fu_306_p2);

assign tmp_7_fu_315_p3 = {{31'd0}, {tmp_6_fu_310_p2}};

assign tmp_8_fu_323_p2 = ((tmp_7_fu_315_p3 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_276_p2 = ((img_in1_data_stream_0_V_dout > 8'd100) ? 1'b1 : 1'b0);

assign tmp_s_fu_258_p2 = ((img_in0_data_stream_0_V_dout > 8'd100) ? 1'b1 : 1'b0);

endmodule //add_with_color
